name: pipeline ci front

on:
  push:
    branches:
      - develop
      - staging
      - main
  pull_request:
    branches:
      - develop
      - staging
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Analisis SonarCloud
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}
      with:
        args: >
          -Dsonar.organization=obligatorio-devops-corbalan-arzuaga
          -Dsonar.projectKey=Obligatorio-DevOps-Corbalan-Arzuaga_FE-react
          -Dsonar.sources=.
          -Dsonar.exclusions=**/node_modules/**
          -Dsonar.branch.name=${{ github.event_name == 'pull_request' && github.head_ref || github.ref_name }}
          -Dsonar.verbose=true
      continue-on-error: false

    - name: Espera de 30 segundos
      run: sleep 30
    
    
    - name: Chequeo SonarCloud Quality Gate
      run: |
        RESPONSE=$(curl -s -u "${{ secrets.SONARCLOUD_TOKEN }}:" \
        "https://sonarcloud.io/api/qualitygates/project_status?projectKey=Obligatorio-DevOps-Corbalan-Arzuaga_FE-react")
    
        echo "Respuesta de la API: $RESPONSE"
    
        STATUS=$(echo "$RESPONSE" | jq -r '.projectStatus.status')
    
        if [ "$STATUS" != "OK" ]; then
          echo "Quality Gate failed: $STATUS"
          exit 1
        else
          echo "Quality Gate passed: $STATUS"
        fi
      env:
        SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

    - name: Build project
      run: npm run build -- --project=catalog --configuration=production

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/front:$GITHUB_SHA .
        
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/front:$GITHUB_SHA
